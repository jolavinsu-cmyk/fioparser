import express from 'express';
import cors from 'cors';
import axios from 'axios';

const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OAuth (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
const CLIENT_ID = process.env.AMOCRM_CLIENT_ID || 'd30b21ee-878a-4fe4-9434-ccc2a12b22fd';
const CLIENT_SECRET = process.env.AMOCRM_CLIENT_SECRET || '0pz2EXM02oankmHtCaZOgFa3rESLXT6F282gVIozREZLHuuYzVyNAFtyYDXMNd2u';
const REDIRECT_URI = process.env.REDIRECT_URI || 'https://fioparser.onrender.com/oauth/callback';
const AMOCRM_DOMAIN = process.env.AMOCRM_DOMAIN || 'insain0';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ
let tokens = null;
let lastCheckTime = new Date(Date.now() - 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥

app.use(cors());
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –§–ò–û (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
function parseFIO(fullName) {
    const parts = fullName.trim().split(/\s+/).filter(part => part.length > 0);
    
    // –†—É—Å—Å–∫–∏–µ —Ñ–∞–º–∏–ª—å–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const surnameEndings = ['–æ–≤', '–µ–≤', '–∏–Ω', '—ã–Ω', '—Å–∫–∏–π', '—Ü–∫–∏–π', '–æ–π', '–∞—è', '—è—è', '–∏—á', '–æ–≤–∞', '–µ–≤–∞', '–∏–Ω–∞', '—ã–Ω–∞'];
    
    let lastName = '';
    let firstName = '';
    let middleName = '';

    if (parts.length === 1) {
        // –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ - —Å—á–∏—Ç–∞–µ–º —Ñ–∞–º–∏–ª–∏–µ–π
        lastName = parts[0];
    } else if (parts.length === 2) {
        // –î–≤–∞ —Å–ª–æ–≤–∞: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–¥–µ —Ñ–∞–º–∏–ª–∏—è –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é
        const firstIsSurname = surnameEndings.some(ending => parts[0].toLowerCase().endsWith(ending));
        const secondIsSurname = surnameEndings.some(ending => parts[1].toLowerCase().endsWith(ending));
        
        if (secondIsSurname && !firstIsSurname) {
            // –í—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–∞–º–∏–ª–∏—é, –ø–µ—Ä–≤–æ–µ - –Ω–∞ –∏–º—è
            firstName = parts[0];
            lastName = parts[1];
        } else if (firstIsSurname && !secondIsSurname) {
            // –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–∞–º–∏–ª–∏—é, –≤—Ç–æ—Ä–æ–µ - –Ω–∞ –∏–º—è
            lastName = parts[0];
            firstName = parts[1];
        } else {
            // –ù–µ–ø–æ–Ω—è—Ç–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –ø–µ—Ä–≤–æ–µ –∏–º—è, –≤—Ç–æ—Ä–æ–µ —Ñ–∞–º–∏–ª–∏—è
            firstName = parts[0];
            lastName = parts[1];
        }
    } else if (parts.length >= 3) {
        // –¢—Ä–∏ –∏ –±–æ–ª–µ–µ —Å–ª–æ–≤: –∏—â–µ–º —Ñ–∞–º–∏–ª–∏—é –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º
        let surnameIndex = -1;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ (—á–∞—â–µ –≤—Å–µ–≥–æ —Ñ–∞–º–∏–ª–∏—è –≤ –∫–æ–Ω—Ü–µ)
        if (surnameEndings.some(ending => parts[parts.length - 1].toLowerCase().endsWith(ending))) {
            surnameIndex = parts.length - 1;
        }
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–∞–º–∏–ª–∏—é, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ
        else if (surnameEndings.some(ending => parts[0].toLowerCase().endsWith(ending))) {
            surnameIndex = 0;
        }
        // –ï—Å–ª–∏ –∏ –ø–µ—Ä–≤–æ–µ –Ω–µ –ø–æ—Ö–æ–∂–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞
        else {
            for (let i = 0; i < parts.length; i++) {
                if (surnameEndings.some(ending => parts[i].toLowerCase().endsWith(ending))) {
                    surnameIndex = i;
                    break;
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ñ–∞–º–∏–ª–∏—é
        if (surnameIndex !== -1) {
            lastName = parts[surnameIndex];
            
            // –û—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–æ –¥–ª–∏–Ω–µ
            const remainingParts = [...parts.slice(0, surnameIndex), ...parts.slice(surnameIndex + 1)];
            
            if (remainingParts.length === 1) {
                // –û–¥–Ω–æ —Å–ª–æ–≤–æ - –∏–º—è
                firstName = remainingParts[0];
            } else if (remainingParts.length >= 2) {
                // –î–≤–∞ –∏ –±–æ–ª–µ–µ —Å–ª–æ–≤: —Å–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ - –∏–º—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –æ—Ç—á–µ—Å—Ç–≤–æ
                let shortestIndex = 0;
                let minLength = remainingParts[0].length;
                
                for (let i = 1; i < remainingParts.length; i++) {
                    if (remainingParts[i].length < minLength) {
                        minLength = remainingParts[i].length;
                        shortestIndex = i;
                    }
                }
                
                // –°–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ - –∏–º—è
                firstName = remainingParts[shortestIndex];
                
                // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ - –æ—Ç—á–µ—Å—Ç–≤–æ
                const patronymicParts = remainingParts.filter((_, index) => index !== shortestIndex);
                middleName = patronymicParts.join(' ');
            }
        } else {
            // –ù–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É –¥–ª–∏–Ω—ã
            // –°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ - —Ñ–∞–º–∏–ª–∏—è
            let longestIndex = 0;
            let maxLength = parts[0].length;
            
            for (let i = 1; i < parts.length; i++) {
                if (parts[i].length > maxLength) {
                    maxLength = parts[i].length;
                    longestIndex = i;
                }
            }
            
            lastName = parts[longestIndex];
            
            // –û—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏: —Å–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ - –∏–º—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –æ—Ç—á–µ—Å—Ç–≤–æ
            const remainingParts = parts.filter((_, index) => index !== longestIndex);
            
            if (remainingParts.length === 1) {
                firstName = remainingParts[0];
            } else if (remainingParts.length >= 2) {
                let shortestIndex = 0;
                let minLength = remainingParts[0].length;
                
                for (let i = 1; i < remainingParts.length; i++) {
                    if (remainingParts[i].length < minLength) {
                        minLength = remainingParts[i].length;
                        shortestIndex = i;
                    }
                }
                
                firstName = remainingParts[shortestIndex];
                const patronymicParts = remainingParts.filter((_, index) => index !== shortestIndex);
                middleName = patronymicParts.join(' ');
            }
        }
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –≤ –æ–¥–Ω–æ –ø–æ–ª–µ
    const fullFirstName = [firstName, middleName].filter(Boolean).join(' ').trim();

    console.log('üîç Parser debug:');
    console.log('- Input:', fullName);
    console.log('- Parts:', parts);
    console.log('- Detected last name:', lastName);
    console.log('- Detected first name:', firstName);
    console.log('- Detected middle name:', middleName);
    console.log('- Combined first name:', fullFirstName);
    
    return { 
        lastName: lastName || '',
        firstName: fullFirstName || '',
        middleName: middleName || '' // –î–ª—è –ª–æ–≥–æ–≤
    };
}
app.get('/auth', (req, res) => {
    const authUrl = `https://www.amocrm.ru/oauth?client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&state=fioparser`;
    res.redirect(authUrl);
});

app.get('/oauth/callback', async (req, res) => {
    try {
        const { code } = req.query;
        const tokenResponse = await axios.post(`https://${AMOCRM_DOMAIN}.amocrm.ru/oauth2/access_token`, {
            client_id: CLIENT_ID, client_secret: CLIENT_SECRET, grant_type: 'authorization_code', code, redirect_uri: REDIRECT_URI
        });

        tokens = {
            access_token: tokenResponse.data.access_token,
            refresh_token: tokenResponse.data.refresh_token,
            expires_at: Date.now() + (tokenResponse.data.expires_in * 1000)
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        startPeriodicCheck();
        
        res.send('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.');
    } catch (error) {
        console.error('OAuth error:', error.response?.data);
        res.status(500).send('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async function startPeriodicCheck() {
    console.log('üöÄ Starting periodic contact check every 30 seconds');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    setTimeout(async () => {
        console.log('\nüîç === INITIAL CONTACTS CHECK ===');
        await checkContactsCount();
    }, 2000);
    
    setInterval(async () => {
        try {
            if (!tokens) {
                console.log('‚è≥ Waiting for authorization...');
                return;
            }

            console.log('\nüîç === STARTING PERIODIC CHECK ===');
            console.log('üïê Last check was:', lastCheckTime.toISOString());
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –∫–∞–∂–¥—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
            await checkContactsCount();
            
            const contacts = await getRecentContacts();
            console.log(`üìã Found ${contacts.length} new contacts to process`);
            
            for (const contact of contacts) {
                await processContact(contact);
            }

            lastCheckTime = new Date();
            console.log('‚úÖ Check completed. New last check time:', lastCheckTime.toISOString());

        } catch (error) {
            console.error('üí• Periodic check error:', error.message);
        }
    }, 30000);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
async function getRecentContacts() {
    try {
        const accessToken = await getValidToken();
        if (!accessToken) {
            console.log('‚ùå No valid token for getting contacts');
            return [];
        }

        console.log('üïê Last check time:', lastCheckTime.toISOString());
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ Unix timestamp (—Å–µ–∫—É–Ω–¥—ã) –¥–ª—è amoCRM
        const sinceTimestamp = Math.floor(lastCheckTime.getTime() / 1000);
        
        // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è!
        const response = await axios.get(
            `https://${AMOCRM_DOMAIN}.amocrm.ru/api/v4/contacts?filter[created_at][from]=${sinceTimestamp}&order=created_at&limit=100`,
            {
                headers: { 
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/json'
                },
                timeout: 10000
            }
        );

        if (!response.data._embedded || !response.data._embedded.contacts) {
            console.log('‚ùå No contacts found in response');
            return [];
        }

        console.log(`üìä Total contacts in response: ${response.data._embedded.contacts.length}`);

        // –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ - –Ω–æ–≤—ã–µ (—Å–æ–∑–¥–∞–Ω—ã –ø–æ—Å–ª–µ lastCheckTime)
        const newContacts = response.data._embedded.contacts;

        console.log(`üìã Found ${newContacts.length} new contacts since last check`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        if (newContacts.length > 0) {
            console.log('üéØ New contacts found:');
            newContacts.forEach((contact, index) => {
                const created = contact.created_at ? new Date(contact.created_at * 1000).toISOString() : 'no date';
                console.log(`  ${index + 1}. ${contact.name || 'No name'} (ID: ${contact.id}, created: ${created})`);
            });
        }

        return newContacts;

    } catch (error) {
        console.error('‚ùå Get contacts error:');
        if (error.response) {
            console.error('Status:', error.response.status);
            console.error('Data:', JSON.stringify(error.response.data, null, 2));
        } else {
            console.error('Message:', error.message);
        }
        return [];
    }
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–° –£–õ–£–ß–®–ï–ù–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú)
async function processContact(contact) {
    try {
        console.log('\n=== PROCESSING CONTACT ===');
        console.log('Contact ID:', contact.id);
        console.log('Original name:', contact.name);
        
        if (!contact.name || contact.name.trim().length < 2) {
            console.log('‚ùå Skip: No valid name');
            return;
        }

        const parsed = parseFIO(contact.name);
        console.log('Parsed result:');
        console.log('- Last name:', parsed.lastName);
        console.log('- First name:', parsed.firstName);
        console.log('- Middle name:', parsed.middleName);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ–æ–±—â–µ –æ–±–Ω–æ–≤–ª—è—Ç—å
        const needsUpdate = parsed.lastName && parsed.firstName;
        if (!needsUpdate) {
            console.log('‚ö†Ô∏è Skip: Not enough data to update');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        const success = await updateContactInAmoCRM(contact.id, parsed);
        
        if (success) {
            console.log('‚úÖ Contact updated successfully');
        } else {
            console.log('‚ùå Failed to update contact');
        }

    } catch (error) {
        console.error('üí• Process contact error:', error.message);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–° –£–õ–£–ß–®–ï–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö)
async function updateContactInAmoCRM(contactId, parsedData) {
    try {
        const accessToken = await getValidToken();
        if (!accessToken) {
            console.log('‚ùå No valid token for update');
            return false;
        }

        // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ lastName –∏ firstName
        // middleName —É–∂–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω –≤ firstName
        const updateData = {
            first_name: parsedData.firstName || '',
            last_name: parsedData.lastName || ''
        };

        console.log('Updating contact with:', updateData);

        const response = await axios.patch(
            `https://${AMOCRM_DOMAIN}.amocrm.ru/api/v4/contacts/${contactId}`,
            updateData,
            {
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                timeout: 10000
            }
        );

        console.log('‚úÖ Update response status:', response.status);
        return response.status === 200;

    } catch (error) {
        if (error.response) {
            console.error('‚ùå API Error:', error.response.status);
            console.error('‚ùå API Response:', JSON.stringify(error.response.data, null, 2));
        } else {
            console.error('‚ùå Network Error:', error.message);
        }
        return false;
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ amoCRM
async function checkContactsCount() {
    try {
        console.log('\nüìä === CONTACTS COUNT CHECK ===');
        
        const accessToken = await getValidToken();
        if (!accessToken) {
            console.log('‚ùå No valid token for contacts check');
            return;
        }
        
        console.log('‚úÖ Token is valid, making API request...');

        // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        const response = await axios.get(
            `https://${AMOCRM_DOMAIN}.amocrm.ru/api/v4/contacts?limit=1`,
            {
                headers: { 
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/json'
                },
                timeout: 10000
            }
        );

        console.log('‚úÖ API connection successful');
        console.log('üìà Response status:', response.status);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if (response.headers['x-pagination-total-items']) {
            console.log('üì¶ Total contacts in amoCRM:', response.headers['x-pagination-total-items']);
        }
        
        if (response.data && response.data._embedded) {
            console.log('üë• Contacts in current response:', response.data._embedded.contacts?.length || 0);
        }

    } catch (error) {
        console.error('‚ùå Contacts count check error:');
        if (error.response) {
            console.error('üìä Status:', error.response.status);
        } else {
            console.error('üí• Error:', error.message);
        }
    }
}
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
async function getValidToken() {
    if (!tokens?.access_token) {
        console.log('‚ùå No access token available');
        return null;
    }

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
    if (Date.now() >= tokens.expires_at - 300000) {
        console.log('üîÑ Token expired or about to expire, refreshing...');
        const success = await refreshToken();
        if (!success) return null;
    }
    
    return tokens.access_token;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
async function refreshToken() {
    try {
        if (!tokens?.refresh_token) {
            throw new Error('No refresh token available');
        }

        const response = await axios.post(`https://${AMOCRM_DOMAIN}.amocrm.ru/oauth2/access_token`, {
            client_id: CLIENT_ID,
            client_secret: CLIENT_SECRET,
            grant_type: 'refresh_token',
            refresh_token: tokens.refresh_token,
            redirect_uri: REDIRECT_URI
        });

        tokens = {
            access_token: response.data.access_token,
            refresh_token: response.data.refresh_token,
            expires_at: Date.now() + (response.data.expires_in * 1000)
        };

        console.log('‚úÖ Token refreshed successfully');
        return true;

    } catch (error) {
        console.error('‚ùå Token refresh error:', error.response?.data || error.message);
        return false;
    }
}
// –°—Ç–∞—Ç—É—Å
app.get('/status', (req, res) => {
    res.json({
        authorized: !!tokens,
        last_check: lastCheckTime.toISOString(),
        domain: AMOCRM_DOMAIN
    });
});
// –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
app.get('/debug/contacts', async (req, res) => {
    try {
        await checkContactsCount();
        res.json({ 
            success: true, 
            message: 'Contacts check completed. Check server logs for details.',
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

app.get('/', (req, res) => {
    res.send(`
        <h1>FIOParser Auto</h1>
        <p>–°—Ç–∞—Ç—É—Å: ${tokens ? '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}</p>
        <a href="/auth">–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å</a> | 
        <a href="/status">–°—Ç–∞—Ç—É—Å</a>
    `);
});

app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
});





