import express from 'express';
import cors from 'cors';
import axios from 'axios';

const app = express();
const PORT = process.env.PORT || 3000;
let lastCheckTime = new Date(Date.now() - 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OAuth (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
const CLIENT_ID = process.env.AMOCRM_CLIENT_ID || 'd30b21ee-878a-4fe4-9434-ccc2a12b22fd';
const CLIENT_SECRET = process.env.AMOCRM_CLIENT_SECRET || '0pz2EXM02oankmHtCaZOgFa3rESLXT6F282gVIozREZLHuuYzVyNAFtyYDXMNd2u';
const REDIRECT_URI = process.env.REDIRECT_URI || 'https://fioparser.onrender.com/oauth/callback';
const AMOCRM_DOMAIN = process.env.AMOCRM_DOMAIN || 'insain0';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ
let tokens = null;
let lastCheckTime = new Date();

app.use(cors());
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –§–ò–û (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
function parseFIO(fullName) {
    const parts = fullName.trim().split(/\s+/).filter(part => part.length > 0);
    let lastName = '', firstName = '', middleName = '';

    if (parts.length === 1) lastName = parts[0];
    else if (parts.length === 2) { lastName = parts[0]; firstName = parts[1]; }
    else if (parts.length >= 3) { lastName = parts[0]; firstName = parts[1]; middleName = parts.slice(2).join(' '); }

    return { lastName, firstName, middleName };
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
app.get('/auth', (req, res) => {
    const authUrl = `https://www.amocrm.ru/oauth?client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}`;
    res.redirect(authUrl);
});

app.get('/oauth/callback', async (req, res) => {
    try {
        const { code } = req.query;
        const tokenResponse = await axios.post(`https://${AMOCRM_DOMAIN}.amocrm.ru/oauth2/access_token`, {
            client_id: CLIENT_ID, client_secret: CLIENT_SECRET, grant_type: 'authorization_code', code, redirect_uri: REDIRECT_URI
        });

        tokens = {
            access_token: tokenResponse.data.access_token,
            refresh_token: tokenResponse.data.refresh_token,
            expires_at: Date.now() + (tokenResponse.data.expires_in * 1000)
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        startPeriodicCheck();
        
        res.send('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.');
    } catch (error) {
        console.error('OAuth error:', error.response?.data);
        res.status(500).send('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async function startPeriodicCheck() {
    setInterval(async () => {
        try {
            if (!tokens) {
                console.log('‚è≥ Waiting for authorization...');
                return;
            }

            console.log('\nüîç === STARTING PERIODIC CHECK ===');
            console.log('üïê Last check was:', lastCheckTime.toISOString());
            
            const contacts = await getRecentContacts();
            console.log(`üìã Found ${contacts.length} contacts to process`);
            
            for (const contact of contacts) {
                await processContact(contact);
            }

            lastCheckTime = new Date(); // –û–ë–ù–û–í–õ–Ø–ï–ú –í–†–ï–ú–Ø –ü–û–°–õ–ï –ü–†–û–í–ï–†–ö–ò
            console.log('‚úÖ Check completed. New last check time:', lastCheckTime.toISOString());

        } catch (error) {
            console.error('üí• Periodic check error:', error.message);
        }
    }, 30000);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
async function getRecentContacts() {
    try {
        console.log('üïê Last check time:', lastCheckTime.toISOString());
        
        const response = await axios.get(
            `https://${AMOCRM_DOMAIN}.amocrm.ru/api/v4/contacts?order[created_at]=desc&limit=50`,
            {
                headers: { 
                    'Authorization': `Bearer ${tokens.access_token}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        if (!response.data._embedded || !response.data._embedded.contacts) {
            console.log('‚ùå No contacts found in response');
            return [];
        }

        const newContacts = response.data._embedded.contacts.filter(contact => {
            if (!contact.created_at) return false;
            
            // amoCRM –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –∞ –Ω–µ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö!
            const contactTime = new Date(contact.created_at * 1000);
            const isNew = contactTime > lastCheckTime;
            
            if (isNew) {
                console.log('üéØ New contact found:', contact.name, 'at', contactTime.toISOString());
            }
            
            return isNew;
        });

        console.log(`üìä Found ${newContacts.length} new contacts`);
        return newContacts;

    } catch (error) {
        console.error('‚ùå Get contacts error:', error.response?.data || error.message);
        return [];
    }
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–° –£–õ–£–ß–®–ï–ù–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú)
async function processContact(contact) {
    try {
        console.log('=== PROCESSING CONTACT ===');
        console.log('Contact ID:', contact.id);
        console.log('Original name:', contact.name);
        
        if (!contact.name || contact.name.trim().length < 2) {
            console.log('‚ùå Skip: No valid name');
            return;
        }

        const parsed = parseFIO(contact.name);
        console.log('Parsed result:', parsed);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ–æ–±—â–µ –æ–±–Ω–æ–≤–ª—è—Ç—å
        const needsUpdate = parsed.lastName || parsed.firstName;
        if (!needsUpdate) {
            console.log('‚ö†Ô∏è Skip: Nothing to update');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        const success = await updateContactInAmoCRM(contact.id, parsed);
        
        if (success) {
            console.log('‚úÖ Contact updated successfully');
        } else {
            console.log('‚ùå Failed to update contact');
        }

    } catch (error) {
        console.error('üí• Process contact error:', error.message);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–° –£–õ–£–ß–®–ï–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö)
async function updateContactInAmoCRM(contactId, parsedData) {
    try {
        const updateData = {
            first_name: parsedData.firstName || '',
            last_name: parsedData.lastName || ''
        };

        console.log('Updating contact with:', updateData);

        const response = await axios.patch(
            `https://${AMOCRM_DOMAIN}.amocrm.ru/api/v4/contacts/${contactId}`,
            updateData,
            {
                headers: {
                    'Authorization': `Bearer ${tokens.access_token}`,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                timeout: 10000
            }
        );

        console.log('Update response status:', response.status);
        return response.status === 200;

    } catch (error) {
        if (error.response) {
            console.error('‚ùå API Error:', error.response.status);
            console.error('‚ùå API Response:', error.response.data);
        } else {
            console.error('‚ùå Network Error:', error.message);
        }
        return false;
    }
}

// –°—Ç–∞—Ç—É—Å
app.get('/status', (req, res) => {
    res.json({
        authorized: !!tokens,
        last_check: lastCheckTime.toISOString(),
        domain: AMOCRM_DOMAIN
    });
});

app.get('/', (req, res) => {
    res.send(`
        <h1>FIOParser Auto</h1>
        <p>–°—Ç–∞—Ç—É—Å: ${tokens ? '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}</p>
        <a href="/auth">–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å</a> | 
        <a href="/status">–°—Ç–∞—Ç—É—Å</a>
    `);
});

app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
});

