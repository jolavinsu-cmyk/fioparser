import express from 'express';
import cors from 'cors';
import axios from 'axios';

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –§–ò–û
function parseFIO(fullName) {
    const parts = fullName.trim().split(/\s+/).filter(part => part.length > 0);
    
    let lastName = '';
    let firstName = '';
    let middleName = '';

    if (parts.length === 1) {
        lastName = parts[0];
    } else if (parts.length === 2) {
        lastName = parts[0];
        firstName = parts[1];
    } else if (parts.length >= 3) {
        lastName = parts[0];
        firstName = parts[1];
        middleName = parts.slice(2).join(' ');
    }

    return { lastName, firstName, middleName };
}

// –í–µ–±—Ö—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
app.post('/webhook/contact', async (req, res) => {
    try {
        const { contact, account } = req.body;
        
        if (!contact || !contact.name) {
            return res.status(400).json({ error: 'No contact data' });
        }

        console.log('Processing contact:', contact.name);

        // –ü–∞—Ä—Å–∏–º –§–ò–û
        const parsed = parseFIO(contact.name);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ amoCRM
        await updateContactInAmoCRM(account, contact.id, parsed);
        
        res.json({ success: true, parsed });
    } catch (error) {
        console.error('Webhook error:', error);
        res.status(500).json({ error: error.message });
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ API
async function updateContactInAmoCRM(account, contactId, parsedData) {
    const apiUrl = `https://${account}.amocrm.ru/api/v4/contacts/${contactId}`;
    
    const updateData = {
        first_name: parsedData.firstName,
        last_name: parsedData.lastName,
        custom_fields_values: [
            {
                field_id: 123456, // ID –ø–æ–ª—è "–û—Ç—á–µ—Å—Ç–≤–æ"
                values: [{ value: parsedData.middleName }]
            }
        ]
    };

    // –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω access_token –∏–∑ OAuth
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log('Would update contact:', updateData);
    return true;
}

// UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
app.get('/admin', (req, res) => {
    res.send(`
        <h1>FIOParser Admin</h1>
        <p>–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω</p>
        <p>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: 0</p>
    `);
});

app.listen(PORT, () => {
    console.log(`üöÄ Auto-parser server running on port ${PORT}`);
});
