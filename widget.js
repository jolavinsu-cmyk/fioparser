define(['jquery'], function($) {
  function parseFIO(fio) {
    var parts = fio.trim().split(/\s+/);
    var lastName = "", firstName = "", patronymic = "";

    function isPatronymic(word) { return /(–≤–∏—á|–≤–Ω–∞)$/i.test(word); }
    function isLastName(word) { return /(–æ–≤|–µ–≤|–∏–Ω|—ã–Ω|—Å–∫–∏–π|—Ü–∫–∏–π|–∞—è|—è—è|–∫–∞—è)$/i.test(word); }

    parts.forEach(function(word) {
      if (!patronymic && isPatronymic(word)) patronymic = word;
      else if (!lastName && isLastName(word)) lastName = word;
      else if (!firstName) firstName = word;
    });

    return { lastName, firstName, patronymic };
  }

  return {
    init: function() {
      console.log("‚úÖ FIO Parser Widget loaded");
      return true;
    },
    bind_actions: function() { return true; },
    render: function() {
      console.log("üéØ Render –≤—ã–∑–≤–∞–Ω", this);

      try {
        let entity = this.system().area; // –∫–æ–Ω—Ç–∞–∫—Ç / —Å–¥–µ–ª–∫–∞ / –∫–æ–º–ø–∞–Ω–∏—è
        console.log("üìå –û—Ç–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:", entity);

        if (entity === "contacts") {
          let name = this.params().name || "";
          console.log("üë§ –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:", name);

          if (name) {
            let parsed = parseFIO(name);
            console.log("üîé Parsed FIO:", parsed);
          }
        }
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ render:", e);
      }

      return true;
    }
  };
});
